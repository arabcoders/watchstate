name: Building

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: "Log level"
        required: true
        default: "warning"
        type: choice
        options:
          - info
          - warning
          - debug
      build:
        description: "Build"
        required: false
        default: false
        type: boolean
      update_readme:
        description: "Update Readme"
        required: false
        default: false
        type: boolean
      create_release:
        description: "Create Release (requires build)"
        required: false
        default: false
        type: boolean

  push:
    branches:
      - master
      - dev
    paths-ignore:
      - "**.md"
      - ".github/**"

  pull_request:
    branches:
      - "master"
    paths-ignore:
      - "**.md"
      - ".github/**"

env:
  DOCKERHUB_SLUG: arabcoders/watchstate
  GHCR_SLUG: ghcr.io/arabcoders/watchstate
  PLATFORMS: linux/amd64,linux/arm64

jobs:
  unit-tests:
    name: PHP ${{ matrix.php }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        php: [ 8.4 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update Version File
        uses: arabcoders/write-version-to-file@master
        with:
          filename: "/config/config.php"
          placeholder: "$(version_via_ci)"
          with_date: "true"
          with_branch: "true"

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: pdo, mbstring, ctype, curl, sqlite3
          coverage: none
          tools: composer:v2

      - name: Get composer cache directory
        id: composer-cache
        run: echo "COMPOSER_CACHE_DIR=$(composer config cache-files-dir)" >> "$GITHUB_OUTPUT"

      - name: restore cached dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.COMPOSER_CACHE_DIR }}
          key: "${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}"
          restore-keys: ${{ matrix.php }}-composer-

      - run: composer install --prefer-dist --no-interaction --no-progress
      - run: composer run test

  pr_build_test:
    needs: unit-tests
    if: github.event_name == 'pull_request'
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: bahmutov/npm-install@v1
        with:
          working-directory: frontend
          install-command: yarn --production --prefer-offline --frozen-lockfile

      - uses: bahmutov/npm-install@v1
        with:
          working-directory: frontend
          install-command: yarn run generate

      - name: Update Version File
        uses: arabcoders/write-version-to-file@master
        with:
          filename: "/config/config.php"
          placeholder: "$(version_via_ci)"
          with_date: "true"
          with_branch: "true"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          platforms: ${{ env.PLATFORMS }}
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha, scope=pr_${{ github.workflow }}
          cache-to: type=gha, scope=pr_${{ github.workflow }}

  publish_docker_images:
    needs: unit-tests
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.build == 'true')
    runs-on: "ubuntu-latest"
    permissions:
      packages: write
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: bahmutov/npm-install@v1
        with:
          working-directory: frontend
          install-command: yarn --production --prefer-offline --frozen-lockfile

      - uses: bahmutov/npm-install@v1
        with:
          working-directory: frontend
          install-command: yarn run generate

      - name: Update Version File
        uses: arabcoders/write-version-to-file@master
        with:
          filename: "/config/config.php"
          placeholder: "$(version_via_ci)"
          with_date: "true"
          with_branch: "true"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKERHUB_SLUG }}
            ${{ env.GHCR_SLUG }}
          tags: |
            type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
            type=ref,event=branch
            type=ref,event=tag
            type=raw,value={{branch}}{{base_ref}}-{{date 'YYYYMMDD'}}-{{sha}}
          flavor: |
            latest=false

      - name: Login to github
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          platforms: ${{ env.PLATFORMS }}
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha, scope=${{ github.workflow }}
          cache-to: type=gha, scope=${{ github.workflow }}

      - name: Version tag
        uses: arabcoders/action-python-autotagger@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repo_name: arabcoders/watchstate
          path: config/config.php
          regex: "'version'\\s\\=\\>\\s\\'(.+?)\\'\\,"

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install gitpython

      - name: Get Branch Name from Tag
        id: branch_name
        run: |
          TAG_NAME=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "${TAG_NAME}" ]; then
            TAG_NAME=$(git rev-parse --abbrev-ref HEAD)
          fi
          # Assume the tag (or branch name) is in the format "branch-something".
          BRANCH_NAME=$(echo "${TAG_NAME}" | cut -d '-' -f1)
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
          echo "Detected Tag: ${TAG_NAME} on Branch: ${BRANCH_NAME}"

      - name: Push CHANGELOG to gh-pages.
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          WORKTREE_DIR=gh-pages-worktree

          if git show-ref --verify --quiet refs/heads/gh-pages; then
            [ -d "$WORKTREE_DIR" ] && rm -rf "$WORKTREE_DIR"
            git worktree add "$WORKTREE_DIR" gh-pages
          else
            git worktree add -B gh-pages "$WORKTREE_DIR"
          fi

          python .github/scripts/generate_changelog.py --repo_path . --changelog_path ./CHANGELOG-${BRANCH_NAME}.json --branch_name $BRANCH_NAME

          cd "$WORKTREE_DIR"
          git pull --rebase origin gh-pages || true
          cp ../CHANGELOG-${BRANCH_NAME}.json .
          git add CHANGELOG-${BRANCH_NAME}.json
          git commit -m "Update Changelog for ${BRANCH_NAME}" || echo "No changes to commit"
          git push origin gh-pages


  dockerhub-sync-readme:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && endsWith(github.ref, github.event.repository.default_branch)) || (github.event_name == 'workflow_dispatch' && github.event.inputs.update_readme == 'true')
    steps:
      - name: Sync README
        uses: docker://lsiodev/readme-sync:latest
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
          GIT_REPOSITORY: ${{ github.repository }}
          DOCKER_REPOSITORY: ${{ env.DOCKERHUB_SLUG }}
          GIT_BRANCH: ${{ github.event.repository.default_branch }}
        with:
          entrypoint: node
          args: /opt/docker-readme-sync/sync
